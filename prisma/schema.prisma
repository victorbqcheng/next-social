// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlserver"
    url      = env("DATABASE_URL")
}

model User {
    id                     String          @id
    username               String          @unique
    avatar                 String?
    cover                  String?
    name                   String?
    surname                String?
    description            String?
    city                   String?
    school                 String?
    work                   String?
    webset                 String?
    createdAt              DateTime        @default(now())
    posts                  Post[]
    comments               Comment[]
    postlikes              PostLike[]
    commentlikes           CommentLike[]
    followers              Follower[]      @relation("UserFollowers")
    followings             Follower[]      @relation("UserFollowings")
    followRequestsSent     FollowRequest[] @relation("FollowRequestSender")
    followRequestsReceived FollowRequest[] @relation("FollowRequestReceiver")
    blockRequestsSent      BlockRequest[]  @relation("BlockSender")
    blockRequestsReceived  BlockRequest[]  @relation("BlockReceiver")
    stories                Story[]
}

model Post {
    id        Int        @id @default(autoincrement())
    desc      String
    img       String?
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    comments  Comment[]
    likes     PostLike[]
}

model PostLike {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())

    user   User   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    userId String

    post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId Int
}

model Comment {
    id        Int      @id @default(autoincrement())
    desc      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    userId String

    post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId Int

    likes CommentLike[]
}

model CommentLike {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())

    user   User   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    userId String

    comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
    commentId Int
}

model Follower {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())

    follower   User   @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
    followerId String

    following   User   @relation("UserFollowings", fields: [followingId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    followingId String
}

model FollowRequest {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())

    sender   User   @relation("FollowRequestSender", fields: [senderId], references: [id], onDelete: Cascade)
    senderId String

    receiver   User   @relation("FollowRequestReceiver", fields: [receiverId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    receiverId String

    @@unique([senderId, receiverId])
}

model BlockRequest {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())

    sender   User   @relation("BlockSender", fields: [senderId], references: [id], onDelete: Cascade)
    senderId String

    receiver   User   @relation("BlockReceiver", fields: [receiverId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    receiverId String

    @@unique([senderId, receiverId])
}

model Story {
    id        Int      @id @default(autoincrement())
    img      String
    createdAt DateTime @default(now())
    expiresAt DateTime
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @unique

}
